ÇözümAdı/ImageBasedEncryptionSystem
│
├── ImageBasedEncryptionSystem.UI → Formların bulunacağı katman (Windows Forms, Guna.UI2.WinForms)
│   └── Forms/
│        └── FrmMenu → Ana menü, şifreleme ve şifre çözme işlemleri.
│        │   └── btnEncrypt → Butonun İşlevi;
│        │                     - 'txtPassword'e girilen parola ile 'Cls_AesHelper' kullanarak 256-bit AES anahtarı türet.
│        │                     - 'txtInput'a girilen metin verisini 'Cls_AesHelper' ve türetilen AES anahtarı ile şifrele (AES-256).
│        │                     - 'Cls_RsaHelper' (BouncyCastle kullanarak) ve güncel RSA anahtar çiftinin Public Key'i (3072-bit) ile türetilen AES anahtarını şifrele.
│        │                     - 'Cls_LsbHelper' kullanarak şifrelenmiş metni ('AES_Encrypted_Text') ve şifrelenmiş AES anahtarını ('RSA_Encrypted_AES_KEY') seçilen görsele LSB tekniği ile gizle.
│        │                     - 'Cls_LsbHelper' kullanarak veri gizlenmiş görsele özel "ZORLU" imzasını ekle (Veri bütünlüğü ve kaynak doğrulaması için).
│        │   └── btnDecrypt → Butonun İşlevi;
│        │                     - Seçilen görselde 'Cls_LsbHelper' ile eklenen özel "ZORLU" imzası var mı kontrol et. İmza yoksa veya geçersizse işlemi durdur.
│        │                     - Görseldeki gizlenmiş veriyi (şifreli metin ve şifreli AES anahtarı) 'Cls_LsbHelper' ile LSB tekniğini kullanarak dışarı çıkart.
│        │                     - Çıkartılan 'RSA_Encrypted_AES_KEY' verisini 'Cls_RsaHelper' (BouncyCastle kullanarak) ve güncel RSA anahtar çiftinin Private Key'i (3072-bit) ile çözerek orijinal AES anahtarını elde et.
│        │                     - 'txtPassword'e girilen parola ile tekrar AES anahtarı türet ve çözülen AES anahtarı ile karşılaştır (veya parola türetme mekanizması doğrulama içeriyorsa direkt kullan).
│        │                     - Eğer anahtarlar/parola doğrulaması başarılı ise, görselden çıkartılan 'AES_Encrypted_Text' verisini elde edilen AES anahtarı (256-bit) kullanarak çöz.
│        │                     - Çözülen orijinal metni 'txtOutput' içinde göster.
│        │   └── btnImage → Min. boyutu 256x256 olan bir resim seçtirir ve seçilen resmi 'pboxImage' içinde gösterir.
│        │   └── btnInfo → 'FrmInfo' (Bilgilendirme) sayfasına yönlendirir.
│        │   └── txtInput → Şifrelenecek metnin girildiği alan.
│        │   └── txtPassword → Şifreleme/Şifre çözme için kullanılacak parolanın girildiği alan.
│        │   └── txtOutput (Sadece Okunur) → 'btnDecrypt' işlemi sonucu çözülen metni gösterir.
│        │   └── pboxImage → 'btnImage' ile seçilen veya şifrelenmiş/şifresi çözülecek görseli gösterir.
│        │   └── btnAdmin → İşlevi;
│        │                - Varsayılan olarak görünmez.
│        │                - Geliştirici girişi yapılmış ancak Geliştirici Modu kapalı ise buton görünür ama tıklanamaz.
│        │                - Geliştirici girişi yapılmış ve Geliştirici Modu aktif ise buton görünür ve tıklanabilir.
│        │                - Tıklandığında 'FrmAdmin' (Yönetim Paneli) sayfasına yönlendirir.
│        │   └── btnAnalysis → İşlevi;
│        │                - Varsayılan olarak görünmez.
│        │                - Geliştirici girişi yapılmış ancak Geliştirici Modu kapalı ise buton görünür ama tıklanamaz.
│        │                - Geliştirici girişi yapılmış ve Geliştirici Modu aktif ise buton görünür ve tıklanabilir.
│        │                - Tıklandığında 'FrmAnalysis' (Analiz Ekranı) sayfasına yönlendirir.
│        │   └── btnDevMod → İşlevi;
│        │                - Varsayılan olarak görünmez.
│        │                - Sadece Geliştirici girişi yapıldıysa görünür.
│        │                - Tıklandığında 'Cls_DeveloperMode' içindeki metot ile Geliştirici Modunu Aktif/Deaktif eder.
│        │
│        └── FrmInfo → Sistem hakkında genel bilgiler ve kullanım kılavuzu sunar.
│        │    └── btnMenu → Ana Menüye ('FrmMenu') döner.
│        │    └── label1 → Proje Hakkında Bilgiler (TÜBİTAK Projesi, Amaç vb.).
│        │    └── label2 → Emeği Geçenler (Proje Ekibi - İzmir Kanuni Sultan Süleyman AL.).
│        │
│        └── FrmLogin → Geliştirici kimliği ve parola ile güvenli giriş sağlar.
│        │    └── btnLogin → 'txtDeveloperId' ve 'txtPassword' değerleri 'Config.json'daki Geliştirici hesabı bilgileriyle eşleşirse, 'Cls_DeveloperMode' içindeki giriş metodu çalışır ve geliştirici oturumu açılır. Geliştirici Modu ayrıca aktive edilmelidir.
│        │
│        └── FrmAdmin → Sistem kimliği yönetimi ve RSA anahtar çiftlerinin yeniden yapılandırılması.
│        │    └── btnReset → 'Config.json' dosyasındaki 'DefaultSystemIdentity' değerini mevcut 'SystemIdentity' yerine yazar. Bu değişiklikle tetiklenen yeni RSA anahtar çiftini ('Private_Key', 'Public_Key') 'Cls_RsaHelper' ile oluşturur ve güncel kimliği ('txtIdentity') ve anahtar çiftini ('txtRsaKey') gösterir.
│        │    └── btnRandom → 'Cls_IdentityCreate' sınıfındaki metot ile 10-100 karakter arası rastgele yeni bir sistem kimliği oluşturur ve 'txtNewIdentity' alanına yazar.
│        │    └── btnSave → 'txtNewIdentity'deki değeri 'Config.json'daki 'SystemIdentity' olarak kaydeder. 'Cls_RsaHelper' bu değişikliği algılar, yeni kimliğe göre yeni RSA anahtar çiftini (Private/Public Key) üretir. Yeni kimliği 'txtIdentity' ve yeni anahtar çiftini 'txtRsaKey' alanlarında gösterir. (Dikkat: Kimlik değişikliği eski verilerin çözülebilmesini etkiler!).
│        │    └── txtIdentity → 'Config.json'da kayıtlı olan mevcut 'SystemIdentity' değerini gösterir (sürekli güncel).
│        │    └── txtRsaKey → Mevcut 'SystemIdentity' değeri ile 'Cls_RsaHelper' tarafından oluşturulan güncel RSA anahtar çiftini (Private ve Public Key, 3072-bit, PEM formatında olabilir) gösterir (sürekli güncel).
│        │
│        └── FrmAnalysis → Veri gizlenmiş görsellerin analizi veya şifreleme/çözme süreçlerinin detaylı incelenmesi için kullanılır (Geliştirici Modu gerektirir).
│            └── (İçerik detayları analize göre eklenebilir -örn: LSB analizi, başlık bilgileri vb.)
│
├── ImageBasedEncryptionSystem.BusinessLayer → Şifreleme, veri gizleme ve iş mantığı metotlarının bulunacağı katman.
│   └── Cls_AesHelper.cs → AES şifreleme ve şifre çözme işlemleri.
│                         - AES-256 algoritmasını kullanır.
│                         - Şifreleme/Çözme metotları içerir.
│                         - Sabit bir IV (Initialization Vector) değeri kullanır.
│                         - Parola tabanlı anahtar türetme fonksiyonu (PBKDF2 gibi) ile kullanıcı parolasından 256-bit AES anahtarı üreten bir metot içerir. Aynı parola her zaman aynı anahtarı üretmelidir.
│   └── Cls_RsaHelper.cs → RSA asimetrik şifreleme/şifre çözme ve anahtar yönetimi.
│                         - BouncyCastle kütüphanesini kullanarak RSA işlemlerini gerçekleştirir.
│                         - AES anahtarını şifreleme ve şifresini çözme metotları içerir.
│                         - 'SystemIdentity' değerine bağlı olarak deterministik bir şekilde 3072-bit RSA anahtar çifti (Public ve Private Key) üreten bir metot içerir.
│                         - 'SystemIdentity' değeri 'DataLayer'daki 'Config.json'dan dinamik olarak okunur ve değişiklikler takip edilir.
│                         - 'SystemIdentity' değiştiğinde otomatik olarak yeni anahtar çifti üretir.
│                         - 'SystemIdentity' 10 ila 100 karakter arasında olmalıdır.
│                         - Eğer 'SystemIdentity' null ise veya okunamıyorsa, 'Config.json'daki 'DefaultSystemIdentity' değerini kullanır.
│                         - Anahtarları PEM formatında dışa aktarma/içe aktarma yeteneği olabilir.
│   └── Cls_LsbHelper.cs → LSB (Least Significant Bit) Steganografi işlemleri.
│                         - Verilen byte dizisini (şifreli veri) bir görsele LSB tekniği ile gizleme metodu içerir.
│                         - Görseldeki LSB ile gizlenmiş veriyi çıkartma metodu içerir.
│                         - Görselin veri gizlemeye uygun olup olmadığını (boyut, format vb.) kontrol edebilir.
│                         - Veri gizlenmiş görsellere özel "ZORLU" imzasını ekleme ve kontrol etme metotları içerir.
│                         - PNG formatında transparanlığı korumaya çalışır.
│                         - Veri gizleme/çıkartma işlemlerinde veri kaybı olmamasını hedefler (%0 kayıp).
│                         - Görsel kalitesindeki bozulmayı minimumda tutmayı hedefler.
│   └── Cls_Analysis.cs → Görsel analiz işlemleri ve şifreleme süreçlerinin takibi.
│                         - LSB ile veri gizlenmiş bir görselin kapasitesini, kullanılan bit sayısını vb. analiz eden metotlar içerebilir.
│                         - Şifreleme/şifre çözme adımlarının loglanması veya raporlanması için metotlar barındırabilir.
│   └── Cls_DeveloperMode.cs → Geliştirici modu yönetimi ve kimlik doğrulama.
│                         - Geliştirici kimliği ve parola ile giriş yapma (login) metodu içerir. Kimlik bilgileri 'Config.json'dan okunur.
│                         - Geliştirici oturumunu sonlandırma (logout) metodu içerir.
│                         - Geliştirici Modunu Aktif/Deaktif etme metodu içerir (toggle).
│                         - Mevcut oturumun durumunu (giriş yapıldı mı, mod aktif mi) kontrol eden metotlar içerir.
│   └── Cls_IdentityCreate.cs → Rastgele sistem kimliği üretimi.
│                         - 10 ile 100 karakter arasında rastgele, güvenli bir karakter dizisi (sistem kimliği) üreten bir metot içerir.
│   └── Cls_Backgraund.cs → Formlar için dinamik arka plan görseli oluşturma (Opsiyonel, önceki yapıda vardı).
│                         - Projeye uygun bir arka plan görseli oluşturur ve formların arka planı olarak ayarlanmasını sağlar.
│
├── ImageBasedEncryptionSystem.TypeLayer → Hata ve başarı mesajları için tip tanımlamaları. (Tüm metotlar detaylı hata ayıklama için try-catch blokları ile korunur)
│   └── Errors.cs → Projedeki olumsuz sonuçlar için standart hata mesajlarını tanımlar. Diğer katmanlar bu sınıftan mesaj çeker.
│   └── Success.cs → Projedeki olumlu sonuçlar için standart başarı mesajlarını tanımlar. Diğer katmanlar bu sınıftan mesaj çeker.
│
├── ImageBasedEncryptionSystem.DataLayer → Yapılandırma ve veri yönetimi.
│   └── Cls_Config.cs → Uygulama yapılandırma dosyasını ('Config.json') yönetir.
│                       - 'Config.json' dosyasının varlığını kontrol eder. Yoksa, 'Default' değerlerle (%APPDATA%\Local\ProjeAdı\ içinde) oluşturur.
│                       - 'Config.json' dosyasını okuma ve yazma metotları içerir (Newtonsoft.Json kullanır).
│                       - 'Config.json' dosyasını şifreleme ve şifresini çözme metotları içerir. Bu işlem için kendi içinde tanımlı, sabit bir AES anahtarı ve IV kullanır (Güvenlik için Cls_AesHelper'dan bağımsız).
│                       - Yapılandırma dosyasının kaydedileceği kullanıcıya özel dizini (`C:\Users\{KullanıcıAdı}\AppData\Local\ProjeAdı\`) yönetir.
│   └── Config.json → Uygulama ayarlarını içeren JSON dosyası (şifrelenmiş olarak saklanır).
│                       - 'DefaultSystemIdentity': Varsayılan sistem kimliği.
│                       - 'SystemIdentity': Mevcut, kullanıcı tarafından ayarlanabilen sistem kimliği (RSA anahtarları buna bağlıdır).
│                       - Geliştirici Kimliği (DeveloperID) ve Parolası (DeveloperPasswordHash) gibi giriş bilgilerini içerir.
│