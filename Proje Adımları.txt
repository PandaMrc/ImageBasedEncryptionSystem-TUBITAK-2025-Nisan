Yeni bir projeye başladım. Proje dosyasını katmanlı mimariye uygun şekilde yapacağım. Projenin Güncel Hali bu şekilde

ÇözümAdı/GörüntüTabanlıHibritŞifrelemeSistemi 
│
├── GörüntüTabanlıHibritŞifrelemeSistemi.UI     → Form ların bulunacağı katman 
├── GörüntüTabanlıHibritŞifrelemeSistemi.BusinessLayer     → Class ların bulunacağı katman
├── GörüntüTabanlıHibritŞifrelemeSistemi.DataLayer     → Veri işlemleri  
├── GörüntüTabanlıHibritŞifrelemeSistemi.TypeLayer     → Hazır mesajların bulunacağı katman.

Projenin işleyişi şu şekilde olacak:

GörüntüTabanlıHibritŞifrelemeSistemi
│
├── GörüntüTabanlıHibritŞifrelemeSistemi.UI         → WinForms arayüzü
│   └── Forms/
│        └── FrmMenu 
│        │   └── btnEncrypt → Butonun İşlevi;
│        │                     - Tıklandığı zaman önce "btnPassword" e girilen metin ile bir AES keyi oluşturacak,
│        │                     - daha sonra "txtInput" a girilen metini "Cls_AesEncrypt.cs" class ındaki metod ile şifreleyecek,
│        │                     - metin şifreleme işlemi bittikten sonra "btnPassword" e girilen metinle oluşturulan AES keyini "Cls_RsaEncrypt" class ındaki metod ile şifreleyecek.
│        │                     - Son olarak 2 ayrı string olarak "txt_input" ve "aes_key" olarak "Cls_WaveletEncrypt" classındaki metod ile resmin içerisine şifreleyecek.
│        │                     - Metodları yazarken try-catch blokları kullan ve bütün hata/başarı mesajları için TypeLayer katmanındaki Succsess.cs ve Errors.cs sınıflarından alacak şekilde güncelle ve ilgili mesajları sınıfların        │        │                        içinde kategorize et.
│        │   └── btnDecrypt → Butonun İşlevi;
│        │                     - btnDecrypt için click eventi oluştur.
│        │                     - "btnImage" ile seçilen resmin şifreli olup olmadığını kontrol edecek.
│        │                     - Şifrelenen resimi "Cls_LsbDecrypt" class ındaki metod ile ayırştıracak.
│        │                     - "txtPassword"e girilen metinden bir AES keyi oluşturacak.
│        │                     - Elde edilen 2 stringin önce "AES_KEY" olanı Cls_RsaDecrypt" classındaki metod la çözecek.
│        │                     - Daha sonra çözümlenen "AES_KEY" ile "txtPassword" ten alınan metinle oluşturulan AES keyleri karşılaştırılacak.
│        │                     - Eğer aynı ise resimin içinden çıkartılan "txt_input" "Cls_AesDecrypt.cs" Classındaki metod ile gizlenen metin ortaya çıkacak ve "txtOutput" kısmına iletilecek.
│        │
│        │   └── btnImage → Resim seçmek için bir pencere açar.
│        │   └── btnInfo → FrmInfo formuna yönlendirir
│        │   └── txtInput → Kullanıcının girdiği metin "Cls_AesEncrypt.cs" metoduyla şifrelenir şifrelenen metinin AES anahtarı ise "txtPassword" e girilen parola ile oluşturulur.
│        │   └── txtPassword → Buraya yazılan metin ile yeni bir AES keyi oluşturulur. Başka bir seferde aynı metin girilirse aynı key oluşturulur. "txtPassword"e girilen metin ile oluşturulan key "Cls_RsaEncrypt.cs" Clasındaki metodla şifrelenir.
│        │   └── txtOutput (Sadece Okunur) → 
│        │   └── lblInputText → Şifrelenecek Metin:
│        │   └── lblPaswordText → Parola:
│        │   └── lblInputText → Çözülen Metin:
│        │   └── lblImageText → Seçilen Resim:
│        │   └── pboxImage → Seçilen Resmi Gösterir
│        └── FrmInfo 
│            └── btnMenu → FrmMenu ye yönlendirir
│            └── label1 → Proje Hakkında Bilgiler
│            └── label2 → Emeği Geçenler
│
├── GörüntüTabanlıHibritŞifrelemeSistemi.BusinessLayer        → Merodların Bulunacağı Katman
│   └── Cls_AesEncrypt.cs → AES şifreleme yöntemini kullanan bir şifreleme metodu yazacağız.
│   └── Cls_AesDecrypt.cs → AES Şifreleme yöntemini çözecek bir metod yazacağız.
│   └── Cls_WaveletEncrypt.cs → Veri ve kalite kaybı olmadan seçilen bir görselin içerisine metin saklayacak metod yazacağız.
│   └── Cls_WaveletDecrypt.cs → İçerisinde metin saklı olan resimden kalite ve veri kaybı olmadan içindeki metini çıkartabilecek mir metod yazacağız.
│   └── Cls_RsaEncrypt.cs → RSA şifreleme yöntemi kullanarak bir RSA şifreleme metodu yazacağız.
│   └── Cls_RsaDecrypt.cs → RSA şifreleme yöntemi kullanarak bir RSA şifre çözme metodu yazacağız
│
├── GörüntüTabanlıHibritŞifrelemeSistemi.TypeLayer       → Hazır Mesajların Bulunacağı Katman
│   └── Errors.cs → Projede oluşabilecek her türlü hata için hazır hata mesajları burada olacak. Diğer Class mesajları buradan çekecek.
│   └── Succsess.cs → Projede Olumlu sonuç veren her türlü işlemden sonra gösterilecek mesajlar burada yer alacak diğer dosyalar mesajları bu class içinden çekecek.


NOT: Wavelet Transform (LSB Yerine Kullanılacak)

RSA şifreleme yöntemi kullanarak bir RSA şifreleme metodu yazacağız. sabit bir RSA anahtarı oluşturulması için FrmAdmin.cs de kimlik oluşturma ve kimlik kaydetme yi kullanacağız. Sabit kimlik değeri Config.json dan alınacak ve "SABIT_KIMLIK_TUBITAK_KSSAL_2025" olacak. 


Cls_AesEncrypt.cs → AES şifreleme yöntemini kullanan bir şifreleme metodu yazacağız.
- AES KEY i "FrmMenu" içinde "btnEncrypt_Click" Eventiyle oluşturulacak.

Cls_AesDecrypt.cs → AES Şifreleme yöntemini çözecek bir metod yazacağız.
- "Cls_AesEncrypt.cs" sınıfında yazılan şifreleme metodunu çözecek bir metod içerecek.

Cls_WaveletEncrypt.cs → Bir görselin içerisine metin saklayacak metod yazacağız. (Resim "FrmMenu" den "btnImage_Click" eventi ile alınacak."
- Veri, Kalite, Renk ve Boyut kaybı olmayacak.

Cls_WaveletDecrypt.cs → İçerisinde metin saklı olan resimden metini çıkartabilecek mir metod yazacağız.
- Veri, Kalite, Renk ve Boyut kaybı olmayacak.
- "Cls_WaveletEncrypt.cs" sınıfındaki metodla şifrelenen veriyi çözmek için kullanılacak.

Cls_RsaEncrypt.cs → RSA şifreleme yöntemi kullanarak bir RSA şifreleme metodu yazacağız.
- Private KEY oluşturmak için bir metod daha içerecek ve bu KEY "DataLayer" katmanındaki Config.json dosyasında "SystemIdentity" değerine göre rastgele oluşturulacak.
- "SystemIdentity" e girilen aynı değerler aynı KEY in oluşmasını sağlayacak.

Cls_RsaDecrypt.cs → RSA şifreleme yöntemi kullanarak bir RSA şifre çözme metodu yazacağız.
- "Cls_RsaEncrypt.cs" sınıfındaki metodla şifrelenen veriyi çözmek için kullanılacak.

btnImage → Butonun İşlevi;
- Tıklandığında Resim seçmek için bir pencere açar.
- Min. resim büyüklüğü 640x360 Max. resim büyüklüğü 7680x4320 pixeldir.
- Seöilen görseli "pboxImage" te gösterir.

btnEncrypt → Butonun İşlevi;
- Tıklandığı zaman önce "btnPassword" e girilen metin ile bir AES keyi oluşturacak,
- daha sonra "txtInput" a girilen metini "Cls_AesEncrypt.cs" class ındaki metod ile şifreleyecek,
- metin şifreleme işlemi bittikten sonra "btnPassword" e girilen metinle oluşturulan AES keyini "Cls_RsaEncrypt" class ındaki metod ile şifreleyecek.
- Son olarak 2 ayrı string olarak "txt_input" ve "aes_key" olarak "Cls_WaveletEncrypt" classındaki metod ile resmin içerisine şifreleyecek.

btnDecrypt → Butonun İşlevi;
- btnDecrypt için click eventi oluştur.
- "btnImage" ile seçilen resmin şifreli olup olmadığını kontrol edecek.
- Şifrelenen resimi "Cls_LsbDecrypt" class ındaki metod ile ayırştıracak.
- "txtPassword"e girilen metinden bir AES keyi oluşturacak.
- Elde edilen 2 stringin önce "AES_KEY" olanı Cls_RsaDecrypt" classındaki metod la çözecek.
- Daha sonra çözümlenen "AES_KEY" ile "txtPassword" ten alınan metinle oluşturulan AES keyleri karşılaştırılacak.
- Eğer aynı ise resimin içinden çıkartılan "txt_input" "Cls_AesDecrypt.cs" Classındaki metod ile gizlenen metin ortaya çıkacak ve "txtOutput" kısmına iletilecek.


- Metodları yazarken try-catch blokları kullan ve bütün hata/başarı mesajları için TypeLayer katmanındaki Succsess.cs ve Errors.cs sınıflarından alacak şekilde güncelle ve ilgili mesajları sınıfların çinde kategorize et.


Tabii! Sana az önce anlattığın proje yapısını daha **düzenli**, **anlaşılır** ve **prompt gibi** hazırlanmış bir şekilde yazıyorum:  
(Bunu birine verirsen doğrudan ne yapacağını anlar.)

---

# 📜 Şifreleme ve Saklama Metodları Tasarımı

## 1. **Cls_AesEncrypt.cs**  
**Görev:**  
- AES şifreleme yöntemiyle düz metni şifreleyen bir metod içerir.

**Detaylar:**  
- AES anahtarı (`AES Key`) **FrmMenu** formunda **btnEncrypt_Click** eventi ile oluşturulacak.
- Şifreleme metodunda `AES Key` ve `IV (Initialization Vector)` kullanılacak.
- Geriye **şifrelenmiş veriyi Base64 formatında** döndür.

---

## 2. **Cls_AesDecrypt.cs**  
**Görev:**  
- `Cls_AesEncrypt` sınıfında şifrelenen veriyi AES ile çözen bir metod içerir.

**Detaylar:**  
- "Cls_AesEncrypt.cs" Sınıfındaki metodla şifrelenen veriyi çözecek.
- Decrypt işleminden sonra orijinal düz metni döndür.

---

## 3. **Cls_RsaEncrypt.cs**  
**Görev:**  
- RSA şifreleme yöntemiyle veriyi şifreleyen metod içerir.

**Detaylar:**  
- Ekstra olarak:
  - `Private Key` üretim metoduna sahip olacak.
  - Bu `Private Key`, **DataLayer** katmanındaki **Config.json** dosyasındaki `SystemIdentity` değerine göre oluşturulacak.
  - Aynı `SystemIdentity` girilirse, her zaman aynı RSA anahtarı üretilecek (deterministik anahtar üretimi).

---

## 4. **Cls_RsaDecrypt.cs**  
**Görev:**  
- `Cls_RsaEncrypt` ile şifrelenmiş veriyi çözecek RSA çözme metodunu içerir.

**Detaylar:**  
- Çözümleme için `Private Key` kullanacak.

---

## 5. **Cls_WaveletEncrypt.cs**  
**Görev:**  
- Bir resim içerisine veri (metin) gömme işlemini yapacak.

**Detaylar:**  
- Veri gömmede Accord.NET kütüphanesinin **Wavelet Transform** tekniği kullanılacak.
- "FrmMenu" içindeki **btnImage_Click** eventiyle seçilen görsel üzerinde çalışacak.
- Veri gömme işlemi sırasında:
  - Görselde **kalite**, **renk**, **boyut** kaybı **En Az Olacak Şekilde Ayarla**.
  - Gömülen veri: şifreli `txt_input` ve şifrelenmiş `AES_KEY` olacak.

---

## 6. **Cls_WaveletDecrypt.cs**  
**Görev:**  
- İçinde saklı veri bulunan bir görselden metni çıkartacak.

**Detaylar:**  
- `Cls_WaveletEncrypt` ile gömülen veriyi doğru şekilde çözecek.
- Veri çıkartma sırasında Görselde **kalite**, **renk**, **boyut** kaybı **En Az Olacak Şekilde Ayarla**.
- Çıkarılan veriler: şifreli `txt_input` ve `RSA ile Şifrelenmiş AES_KEY`.


---

# 🖱️ Buton İşlevleri

## 1. **btnImage_Click**
**Görev:**  
- Resim seçme penceresi açar.
- Seçilen resmi `pboxImage` kontrolünde gösterir.

**Kısıtlar:**  
- Min çözünürlük: **640×360** piksel.  
- Max çözünürlük: **7680×4320** piksel.

---

## 2. **btnEncrypt_Click**
**Görev:**  
- `txtPassword`'a girilen metinden bir AES Key oluşturur.
- `txtInput`'a girilen metni `Cls_AesEncrypt` kullanarak AES ile şifreler.
- AES Key'i `Cls_RsaEncrypt` ile şifreler.
- Şifrelenmiş `txt_input` ve `aes_key` verilerini, seçilen görsel içerisine `Cls_WaveletEncrypt` metoduyla gömer.

---

## 3. **btnDecrypt_Click**
**Görev:**  
- Seçilen resimde veri saklı olup olmadığını kontrol eder.
- Saklı veriyi `Cls_WaveletDecrypt` kullanarak çözer.
- `txtPassword`'dan yeni bir AES Key oluşturur.
- Görselden elde edilen `aes_key` verisini `Cls_RsaDecrypt` ile çözer.
- Çözülen AES Key ile kullanıcıdan üretilen AES Key eşleşiyorsa:
  - Saklanan `txt_input` verisi `Cls_AesDecrypt` ile çözümlenir.
  - `txtOutput`'a düz metin olarak yazılır.





----------------------------

Şimdi pir proje yapıyorum Projede katmanlı mimari kullanıyorum.

BusinessLayer;
UI/Cls_Backgraund.cs → sürekli Projeye uygun bir arka plan görseli oluşturur ve bütün formlarda arka plan resmi olarak kullanılır.
Cls_AesEncryp.cs → AES yöntemi kullanarak bir şifreleme metodu içerecek. AES KEY 'FrmMenu' sayfasında 'btnEncrypt' butonuna tıklandığında 'txtPassword' e girilen değer ile oluşacak. Aynı değer aynı KEY i oluşturacak.
Cls_AesDecrypt.cs → AES Yöntemini kullanarak bir şifre çözme metodu içerecek. Şifre çözme işlemi için 'AES KEY', 'FrmMenu' de 'btnDecrypt' butonuna basıldığında 'txtPassword' e girilmiş olan değer le üretilmiş KEY ile yapılacak.
Cls_RsaEncrypt.cs → RSA yöntemi kullanan bir şifreleme metodu içerecek. RSA için gereken 'Private Key' ve 'Public Key', 'DataLayer' katmanında bulunan 'Config.json' dosyasındaki mevcut 'SystemIdentity' değerine göre oluşturulacak. Aynı değerler aynı KEY leri oluşturacak.
Cls_RsaEncrypt → RSA yöntemi kullanan bir şifre çözme metodu içerecek. Şifre çözme için gereken 'Private Key' i 'DataLayer' Katmanında bulunan 'Config.json' dosyasındaki 'SystemIdentity' değerinden oluşturulacak. Bu KEY i oluşturma yöntemi 'Cls_RsaEncrypt' teki yöntem le yapılacak.
Cls_WaveletEncrypt → Accord.NET'in Wavelet yöntemi ile görselin içerisine veri saklama metodu içerecek.
Cls_WaveletDecrypt → AccordçNET'in Wavelet yöntemi ile görselin içerisine saklanan veriyi çıkartma metodu içerecek. 'Cls_WaveletEncrypt' içindeki metodla görsel içine sakalanan veriyi görselden çıkartabilecek.
Cls_Developer → aktif-deaktif edilebilir 'Geliştirici Modu' için ve Geliştirici modunun getirdiği özellikler için gerekli metodları içerecek. 
Cls_IdentityCreate → 'FrmAdmin' de 'btnRandom' butonunda kullanmak üzere rastgele kimlik üretmek için bir metod içerecek. Üretilen kimlikte Büyük-Küçük harfler, Rakamlar ve '_','-' değerlerini içerecek ve min. 10 Max. 50 karakterden oluşacak. Boşluk içeremez ve özel karakterlerle başlayamaz.
Cls_Analysis → 'FrmAnalysis' te kullanılmak üzere analiz işlemlerinde kullanılacak bütün metodları içerecek.

---

DataLayer Katmanı;
Cls_Config.cs → Eğer 'Config.json' bulunamaz ise Default değerlere sabit bir 'Config.json' oluşturur.
Config.json → RSA keylerinin üretiminde kullanılan kimliklerin ve Geliştirici hesaplarının bilgilerinin saklandığı bir dosya. Bu dosya içindeki bilgiler dışarı aktarma sonrası setup yapıldıktan sonra uygulamayı kullanmak için gerekli oacak. Ona uygun şekilde yap ve dosyayı AES ile şifrele. AES KEY her zaman sabit olacak.

---

TypeLayer Katmanı;
Errors.cs → Bütün projedeki hata mesajları dinamik olarak bu sınıf içerisinden alınır.
Succsess.cs → Bütün projedeki başarı mesajları dinamik olarak bu sınıf içerisinden alınır.

---

UI Katmanı;
FrmAdmin → Admin Yönetim Paneli sayfası
İşevi;
- Default bir kimlik var ve bu kimlik RSA anahtarı üretiminde kullanılacak. Bu kimlik değiştirilebilir veya rastgele yeni kimlik üretilebilir. Aynı kimlik aynı RSA anahtarını üretir.
- Yeni kimlik oluşturulursa veya elle girilen değer kaydedilirse bu kimlik 'DataLayer' katmanındaki 'Config.json' "SystemIdentity" olarak içine kaydedilir.
- 'DefaultSystemIdentity' ve 'SystemIdentity', 'DataLayer' katmanında 'Config.json' içinden alınır.
- Mevcut kimlik yani 'SystemIdentity', RSA ile Şifreleme ve Şifre çözme için gereken 'Public Key' ve 'Private Key'i oluşturmak için kullanılcak.

FrmAnalysis → Analiz Paneli
İçerisine veri saklanan görselin çeşitle analizler yaparak orjinal görselde gözle görülemeyecek farklılıklarını kullanıcıya gösterir.

FrmInfo → Bilgilendirme sayfası
Uygulama hakkında çeşitli bilgileri içerir.

FrmLogin → Giriş Yapma
Geliştirici kimliği ve Parola kullanarak giriş yapmak için kullanılır.
Giriş yapılırsa FrmAnalysis ve FrmAdmin sayfalarına erişim yapılabilir.
Geliştirici kimliği ve parola bilgileri 'DataLayer' katmanındaki 'Config.json' içinden alınır.

---

FrmMenu → Ana sayfa
btnImage : Bir resim seçtirir.
txtInput : Bir Metin girilir
txtPassword : Bir Parola girilir ve girilen parola ile AES KEY oluşturulur. Aynı parolayı girmek, aynı AES keyini oluşturur.
txtOutput : Çözme işlemi sonucu elde edilen metini iletir.
pboxImage : Seçilen resmi gösterir
btnEncrypt : 'txtInput' a girilen metini AES ile şifreler ve çözmek için oluşturulan KEY'i 'txtPassword'e girilen değerle oluşturur. Daha sonra oluşturulan 'AES KEY'i RSA ile şifreler. En son "AES ile şifrelenmiş metin"+"RSA ile şifrelenmiş 'AES_KEY'i" olarak seçilen görselin içerisine gizler(Accord.NET'in Wavelet yöntemiyle, Görselin kalitesini min. bozacak şekilde ve boyutunu, rengini değiştirmeden) ve resime her zaman sabit olan bir HASH değeri verir.
btnDecrypt : Butona basabilmek için parola yazılması ve resim seçilmesi gerekir. Seçilen resimde sabit HASH değeri var mı kontrol eder. ( Şifrede gizlenmiş veri var mı anlamak için.) Eğer resimin HASH değeri programın verdiği sabit HASH değeriyle uyuşursa resimdeki gizlenmiş veriyi çıkartır.("AES ile şifrelenmiş metin"+"RSA ile şifrelenmiş 'AES_KEY'i") Çıkartılan verilerden ilk başta 'AES ile şfirelenmiş AES_KEY i ni çözer. Daha sonra elde edilen sonuç ile 'txtPassword' e girilen değerle oluşan 'AES_KEY' ile çözülen 'RSA ile şifrelenmiş AES_KEY i karşılaştırır. Eğer iki KEY eşleşirse görselden çıkartılan 'AES ile şifrelenmiş metin', 'AES_KEY' kullanılarak çözülür ve elde edilen metin 'txtOutput' a iletilir. 
pbLogin : 'FrmLogin' e yönlendirir
btnDevMode : Geliştirici girişi yapılmışsa Geliştirici mdounu aktif-deaktif etme işlemlerini sağlar.
btnAdmin : Eğer Geliştirici girişi yapılmışsa ve Geliştirici Modu aktif edilmiş ise 'FrmAdmin' sayfasına yönlendirir.
btnAnalysis : Eğer Geliştirici girişi yapılmışsa ve Geliştirici Modu aktif edilmiş ise 'FrmAnalysis' sayfasına yönlendirir.
btnInfo : 'FrmInfo' sayfasına yönlendirir.


projede amacım bunlar projeyi analiz et fikrimi analiz et. Açıkları, eksikleri, gereksizleri bana raporla ve istediğim sonucu elde etmem için ne yapmam lazım bana söyle.


