using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using Guna.UI2.WinForms;
using System.IO;
using ImageBasedEncryptionSystem.BusinessLayer;
using ImageBasedEncryptionSystem.TypeLayer;

namespace ImageBasedEncryptionSystem.UI.Forms
{
    public partial class FrmMenu : Form
    {
        // Seçilen resmin yolunu tutacak değişken
        private string selectedImagePath = string.Empty;

        // Business Layer sınıflarının örnekleri
        private Cls_AesEncrypt aesEncrypt;
        private Cls_AesDecrypt aesDecrypt;
        private Cls_RsaEncrypt rsaEncrypt;
        private Cls_RsaDecrypt rsaDecrypt;
        private Cls_LsbEncrypt lsbEncrypt;
        private Cls_LsbDecrypt lsbDecrypt;

        public FrmMenu()
        {
            InitializeComponent();

            // Business Layer sınıflarının örneklerini oluştur
            aesEncrypt = new Cls_AesEncrypt();
            aesDecrypt = new Cls_AesDecrypt();
            rsaEncrypt = new Cls_RsaEncrypt();
            rsaDecrypt = new Cls_RsaDecrypt();
            lsbEncrypt = new Cls_LsbEncrypt();
            lsbDecrypt = new Cls_LsbDecrypt();
        }

        // Form yüklendiğinde çalışacak metod
        private void FrmMenu_Load(object sender, EventArgs e)
        {
            // Arka plan resmin konumunu kontrol et, yoksa oluştur
            string appPath = Application.StartupPath;
            string resourcesFolder = Path.Combine(appPath, "Resources");
            string backgroundImagePath = Path.Combine(resourcesFolder, "background.jpg");

            if (!Directory.Exists(resourcesFolder))
            {
                Directory.CreateDirectory(resourcesFolder);
            }

            // Arka plan resmi yükleme veya oluşturma
            try
            {
                if (File.Exists(backgroundImagePath))
                {
                    using (Bitmap bmp = new Bitmap(backgroundImagePath))
                    {
                        this.BackgroundImage = new Bitmap(bmp);
                    }
                }
                else
                {
                    // Varsayılan bir arka plan resmi oluştur
                    using (Bitmap background = new Bitmap(this.Width, this.Height))
                    {
                        using (Graphics g = Graphics.FromImage(background))
                        {
                            // Gradient arka plan oluştur
                            Rectangle rect = new Rectangle(0, 0, background.Width, background.Height);
                            using (LinearGradientBrush brush = new LinearGradientBrush(
                                rect,
                                Color.FromArgb(30, 30, 50),
                                Color.FromArgb(15, 15, 35),
                                LinearGradientMode.ForwardDiagonal))
                            {
                                g.FillRectangle(brush, rect);

                                // Rastgele noktalar (yıldızlar) ekle
                                Random rnd = new Random();
                                using (SolidBrush starBrush = new SolidBrush(Color.FromArgb(200, 255, 255, 255)))
                                {
                                    for (int i = 0; i < 200; i++)
                                    {
                                        int x = rnd.Next(background.Width);
                                        int y = rnd.Next(background.Height);
                                        int size = rnd.Next(1, 3);
                                        g.FillEllipse(starBrush, x, y, size, size);
                                    }
                                }
                            }
                        }

                        // Resmi kaydet ve form arka planı olarak ayarla
                        background.Save(backgroundImagePath, System.Drawing.Imaging.ImageFormat.Jpeg);
                        this.BackgroundImage = new Bitmap(background);
                    }
                }

                // BackgroundImageLayout'ı Stretch olarak ayarla
                this.BackgroundImageLayout = ImageLayout.Stretch;
            }
            catch (Exception ex)
            {
                MessageBox.Show("Arka plan resmi yüklenemedi: " + ex.Message, "Hata", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        // Resim seç butonuna tıklandığında çalışacak metod
        private void btnImage_Click(object sender, EventArgs e)
        {
            try
            {
                using (OpenFileDialog openFileDialog = new OpenFileDialog())
                {
                    openFileDialog.Title = "Resim Seç";
                    openFileDialog.Filter = "Resim Dosyaları|*.jpg;*.jpeg;*.png;*.bmp|Tüm Dosyalar|*.*";
                    openFileDialog.Multiselect = false;

                    if (openFileDialog.ShowDialog() == DialogResult.OK)
                    {
                        selectedImagePath = openFileDialog.FileName;
                        pboxImage.Image = Image.FromFile(selectedImagePath);
                        MessageBox.Show(Success.MESSAGE3, "Bilgi", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("Resim seçilirken bir hata oluştu: " + ex.Message, "Hata", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        // Şifrele butonuna tıklandığında çalışacak metod
        private void btnEncrypt_Click(object sender, EventArgs e)
        {
            try
            {
                // Şifreleme işlemi için gerekli kontroller
                if (string.IsNullOrWhiteSpace(txtInput.Text) || txtInput.Text.Length < 3)
                {
                    MessageBox.Show(Errors.ERROR2, "Hata", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    return;
                }

                if (string.IsNullOrWhiteSpace(txtPassword.Text) || txtPassword.Text.Length < 3 || txtPassword.Text.Length > 11)
                {
                    MessageBox.Show(Errors.ERROR1, "Hata", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    return;
                }

                if (string.IsNullOrEmpty(selectedImagePath) || pboxImage.Image == null)
                {
                    MessageBox.Show(Errors.ERROR4, "Hata", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    return;
                }

                // 1. AES ile metni şifrele
                string encryptedText = aesEncrypt.EncryptText(txtInput.Text, txtPassword.Text);

                // 2. AES anahtarını al
                byte[] aesKey = aesEncrypt.GetKey(txtPassword.Text);

                // 3. AES anahtarını RSA ile şifrele
                byte[] encryptedKey = rsaEncrypt.EncryptAesKey(aesKey);

                // 4. Şifrelenmiş metin ve anahtarı resme gizle
                Bitmap originalImage = new Bitmap(pboxImage.Image);
                Bitmap resultImage = lsbEncrypt.HideDataInImage(originalImage, encryptedText, encryptedKey);

                // 5. Sonuç resmini kaydet
                using (SaveFileDialog saveFileDialog = new SaveFileDialog())
                {
                    saveFileDialog.Title = "Şifreli Resmi Kaydet";
                    saveFileDialog.Filter = "PNG Dosyası|*.png";
                    saveFileDialog.DefaultExt = "png";

                    if (saveFileDialog.ShowDialog() == DialogResult.OK)
                    {
                        lsbEncrypt.SaveEncryptedImage(resultImage, saveFileDialog.FileName);
                        MessageBox.Show(Success.MESSAGE1, "Bilgi", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, "Hata", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        // Şifre Çöz butonuna tıklandığında çalışacak metod
        private void btnDecrypt_Click(object sender, EventArgs e)
        {
            try
            {
                // Şifre çözme işlemi için gerekli kontroller
                if (string.IsNullOrWhiteSpace(txtPassword.Text) || txtPassword.Text.Length < 3 || txtPassword.Text.Length > 11)
                {
                    MessageBox.Show(Errors.ERROR1, "Hata", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    return;
                }

                if (string.IsNullOrEmpty(selectedImagePath) || pboxImage.Image == null)
                {
                    MessageBox.Show(Errors.ERROR4, "Hata", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    return;
                }

                // 1. Resimden şifrelenmiş metin ve anahtarı çıkar
                Bitmap image = new Bitmap(pboxImage.Image);
                string extractedText;
                byte[] extractedKey;

                if (!lsbDecrypt.ExtractDataFromImage(image, out extractedText, out extractedKey))
                {
                    MessageBox.Show(Errors.ERROR3, "Hata", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    return;
                }

                // 2. RSA ile şifrelenmiş AES anahtarının şifresini çöz
                byte[] decryptedKey = rsaDecrypt.DecryptAesKey(extractedKey);

                // 3. AES ile şifrelenmiş metnin şifresini çöz
                string decryptedText = aesDecrypt.DecryptTextWithKey(extractedText, decryptedKey);

                // 4. Çözülen metni göster
                txtOutput.Text = decryptedText;
                MessageBox.Show(Success.MESSAGE2, "Bilgi", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            catch (CryptographicException)
            {
                MessageBox.Show(Errors.ERROR3, "Hata", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, "Hata", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        // Bilgi butonuna tıklandığında çalışacak metod
        private void btnInfo_Click(object sender, EventArgs e)
        {
            FrmInfo frmInfo = new FrmInfo();
            frmInfo.Show();
            this.Hide();
        }
    }
}
